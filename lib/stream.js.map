{"version":3,"sources":["../src/stream.js"],"names":["EMLStream","options","mail","attachments","keepCidLinks","downloadAttachments","_buffer","Buffer","_parser","on","headers","data","type","Object","keys","forEach","includes","key","push","emit","chunklen","chunks","content","chunk","read","length","concat","release","has","replace","m","c","toUpperCase","get","eml","toString","end","updateImageLinks","attachment","done","contentType","err","html","pipe","encoding"],"mappings":"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","file":"stream.js","sourcesContent":["import { MailParser } from 'mailparser';\nimport { Transform } from 'stream';\n\nexport default class EMLStream extends Transform {\n\n    constructor(options) {\n        super();\n        this.mail = {\n            attachments: []\n        };\n        this.options = options || {\n                keepCidLinks: false,\n                downloadAttachments: false\n            };\n        this._buffer = new Buffer('');\n        this._parser = new MailParser(options);\n        this._parser.on('headers', headers => {\n            this.mail.headers = headers;\n        });\n        this._parser.on('data', data => {\n            if (data.type === 'text') {\n                Object.keys(data).forEach(key => {\n                    if (['text', 'html', 'textAsHtml'].includes(key)) {\n                        this.mail[key] = data[key];\n                    }\n                });\n            }\n            if (data.type === 'attachment') {\n                if (this.options.downloadAttachments) {\n                    this.mail.attachments.push(data);\n                    this.emit('attachment', data);\n                }\n\n                let chunklen = 0;\n                let chunks = [];\n\n                data.content.on('readable', () => {\n                    let chunk;\n                    while ((chunk = data.content.read()) !== null) {\n                        chunklen += chunk.length;\n                        chunks.push(chunk);\n                    }\n                });\n                data.content.on('end', () => {\n                    data.content = Buffer.concat(chunks, chunklen);\n                    data.release();\n                });\n            }\n        });\n        this._parser.on('end', () => {\n            ['subject', 'references', 'date', 'to', 'from', 'to', 'cc', 'bcc', 'message-id', 'in-reply-to', 'reply-to'].forEach(key => {\n                if (this.mail.headers.has(key)) this.mail[key.replace(/-([a-z])/g, (m, c) => c.toUpperCase())] = this.mail.headers.get(key);\n            });\n\n            this.mail.eml = this._buffer.toString('utf-8');\n\n            if (this.options.keepCidLinks) {\n                this.emit('result', this.mail);\n                return this.end();\n            }\n\n            this._parser.updateImageLinks(\n                (attachment, done) => done(false, 'data:' + attachment.contentType + ';base64,' + attachment.content.toString('base64')),\n                (err, html) => {\n                    if (err) {\n                        this.emit('result', this.mail);\n                        this.emit('error', err);\n                        return this.end();\n                    }\n                    this.mail.html = html;\n                    this.emit('result', this.mail);\n                    this.end();\n                }\n            );\n        });\n        this.pipe(this._parser);\n    }\n\n    _transform(chunk, encoding, done) {\n        this._buffer = Buffer.concat([this._buffer, chunk]);\n        this.push(chunk);\n        return done();\n    }\n\n}\n"]}