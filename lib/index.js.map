{"version":3,"sources":["../src/index.js"],"names":["path","debug","require","MailListener","date","Date","toISOString","split","options","retry","lastUID","busy","forceStop","haveNewEmails","defaultOptions","filter","mailbox","setSince","markSeen","setFlags","fetchFromNow","fetchOnStart","parserOptions","keepCidLinks","streamAttachments","downloadAttachments","attachmentOptions","directory","stream","imapOptions","connTimeout","authTimeout","retryDelay","keepalive","tlsOptions","maxRetry","imap","on","onError","bind","onClose","onReady","lastFetch","err","emit","setTimeout","start","openBox","box","uidnext","search","onMail","slice","push","formatDate","results","x","length","fetch","bodies","msg","seg","attributes","once","attr","emlStream","attachment","generatedFileName","content","resolve","uid","mail","pipe","removeAllListeners","connect","end"],"mappings":"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","file":"index.js","sourcesContent":["import EventEmitter from 'events';\nimport EMLStream from './stream';\nimport IMAP from 'imap';\n\nimport { defaultsDeep } from 'lodash';\nimport { writeFile } from 'fs';\nimport * as path from 'path';\n\nconst debug = require('debug')('imap:listener');\n\nexport default class MailListener extends EventEmitter {\n\n    static formatDate(date) {\n        if (!date) date = new Date(0);\n        return date.toISOString().split('T')[0];\n    }\n    \n    constructor(options) {\n        super();\n        this.retry = 0;\n        this.lastUID = 0;\n        this.busy = false;\n        this.forceStop = false;\n        this.haveNewEmails = false;\n        this.defaultOptions = {\n            filter: ['UNSEEN'],\n            mailbox: 'INBOX',\n            setSince: true,\n            markSeen: false,\n            setFlags: false,\n            fetchFromNow: true,\n            fetchOnStart: false,\n            parserOptions: {\n                keepCidLinks: false,\n                streamAttachments: false,\n                downloadAttachments: false\n            },\n            attachmentOptions: {\n                directory: '',\n                stream: null\n            },\n            imapOptions: {\n                connTimeout: 10000,\n                authTimeout: 5000,\n                retryDelay: 1000,\n                keepalive: true,\n                tlsOptions: {},\n                debug: debug,\n                maxRetry: 3\n            }\n        };\n        this.options = defaultsDeep(options, this.defaultOptions);\n        this.options.filter = typeof this.options.filter === 'string' ? [this.options.filter] : this.options.filter;\n        this.options.parserOptions.streamAttachments = this.options.parserOptions.downloadAttachments && this.options.attachmentOptions.stream;\n        this.imap = new IMAP(this.options.imapOptions);\n        this.imap.on('error', this.onError.bind(this));\n        this.imap.on('close', this.onClose.bind(this));\n        this.imap.on('ready', this.onReady.bind(this));\n        this.lastFetch = this.options.fetchFromNow;\n    }\n\n    onError(err) {\n        this.emit('error', err);\n    }\n\n    onClose() {\n        if (!this.forceStop && this.retry < this.options.imapOptions.maxRetry) {\n            setTimeout(() => {\n                debug(\"Trying to establish imap connection again...\");\n                this.start()\n            }, this.options.imapOptions.retryDelay);\n            return this.retry++;\n        }\n        this.emit('disconnected'); debug('disconnected');\n        this.forceStop = false;\n        this.retry = 0;\n    }\n\n    onReady() {\n        this.imap.openBox(this.options.mailbox, false, (err, box) => {\n            if (err) return this.onError(err);\n            this.lastUID = box.uidnext - 1;\n            this.emit('connected'); debug('connected');\n            if (this.options.fetchOnStart) this.search();\n            this.imap.on('mail', this.onMail.bind(this));\n            this.imap.on('update', this.onMail.bind(this));\n            this.retry = 0;\n        });\n    }\n\n    onMail() {\n        if (!this.haveNewEmails && !this.busy) {\n            this.busy = true;\n            this.search();\n        }\n        else if (this.busy) this.haveNewEmails = true;\n    }\n    \n    search() {\n        let filter = this.options.filter.slice();\n        if (this.lastFetch === true) this.lastFetch = new Date();\n        if (this.options.setSince) filter.push([\"SINCE\", MailListener.formatDate(this.lastFetch)]);\n        this.imap.search(filter, (err, results) => {\n            results = results.filter(x => x > this.lastUID);\n            if (err) return this.onError(err);\n            this.lastFetch = new Date();\n            if (results.length > 0) {\n                if (this.options.setFlags) {\n                    this.imap.setFlags(results, ['\\\\Seen'], err => {\n                        if (err) this.onError(err);\n                    });\n                }\n                let fetch = this.imap.fetch(results, {\n                    markSeen: this.options.markSeen,\n                    bodies: ''\n                });\n                fetch.on('message', (msg, seg) => {\n                    let attributes = {};\n                    msg.once('attributes', attr => {\n                        attributes = attr;\n                    });\n                    msg.once('body', stream => {\n                        let emlStream = new EMLStream(this.options.parserOptions);\n                        emlStream.on('attachment', attachment => {\n                            if (!this.options.parserOptions.streamAttachments && this.options.parserOptions.downloadAttachments && attachment) {\n                                writeFile(this.options.attachmentOptions.directory + attachment.generatedFileName, attachment.content, err => {\n                                    if (!err) {\n                                        attachment.path = path.resolve(this.options.attachmentOptions.directory + attachment.generatedFileName);\n                                        this.emit('attachment', attachment);\n                                        return;\n                                    }\n                                    this.onError(err);\n                                });\n                            }\n                        });\n                        emlStream.on('result', mail => {\n                            if (attributes && attributes.uid && attributes.uid > this.lastUID) {\n                                this.lastUID = attributes.uid;\n                            }\n                            this.emit('mail', mail, seg, attributes);\n                        });\n                        emlStream.on('error', err => {\n                            this.onError(err);\n                        });\n                        stream.pipe(emlStream);\n                    });\n                });\n                fetch.once('error', err => {\n                    this.onError(err);\n                });\n                fetch.once('end', () => {\n                    debug('all processed');\n                    if (this.haveNewEmails) {\n                        this.haveNewEmails = false;\n                        return this.search();\n                    }\n                    this.busy = false;\n                });\n                return;\n            }\n            if (this.haveNewEmails) {\n                this.haveNewEmails = false;\n                return this.search();\n            }\n            this.busy = false;\n        });\n    }\n    \n    start() {\n        debug('detaching existing listener');\n        this.imap.removeAllListeners('update');\n        this.imap.removeAllListeners('mail');\n\n        debug('calling imap connect');\n        this.imap.connect();\n    }\n    \n    stop() {\n        this.forceStop = true;\n        this.imap.end();\n    }\n    \n}\n"]}